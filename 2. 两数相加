给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807
--------------------------------------------------------------------------
总体思路：
链表。
在其中的一根链上操作，并作为结果返回。

实现：
注意链表末尾分几种情况，分别怎么处理。情况的转化。

--------------------------------------------------------------------------
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
    	ListNode* ans = l1;
    	ListNode* r = l1;
    	int temp = 0;
    	int jin = 0;
        while(l1!= NULL && l2!= NULL){
        	temp = l1->val + l2->val + jin;
        	jin = 0;
        	if(temp > 9){
        		jin = temp / 10;
        	}
        	l1->val = temp % 10;
        	r = l1;
        	l1 = l1->next;
        	l2 = l2->next;
        }

        if(l1 == NULL){
        	r->next = l2;
        }
        l1 = r->next;

        while(l1!= NULL){
        	temp = l1->val + jin;
        	jin = 0;
        	if(temp > 9){
        		jin = temp / 10;
        	}
        	l1->val = temp % 10;
        	r = l1;
        	l1 = l1->next;
        }

        if(jin!=0){
        	ListNode* node = (ListNode*)malloc(sizeof(ListNode));
        	node->val = jin;
        	node->next = NULL;
        	r->next = node;
        }
        return ans;
    }
};
