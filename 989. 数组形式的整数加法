对于非负整数 X 而言，X 的数组形式是每位数字按从左到右的顺序形成的数组。例如，如果 X = 1231，那么其数组形式为 [1,2,3,1]。

给定非负整数 X 的数组形式 A，返回整数 X+K 的数组形式。

 

示例 1：

输入：A = [1,2,0,0], K = 34
输出：[1,2,3,4]
解释：1200 + 34 = 1234
解释 2：

输入：A = [2,7,4], K = 181
输出：[4,5,5]
解释：274 + 181 = 455
示例 3：

输入：A = [2,1,5], K = 806
输出：[1,0,2,1]
解释：215 + 806 = 1021
示例 4：

输入：A = [9,9,9,9,9,9,9,9,9,9], K = 1
输出：[1,0,0,0,0,0,0,0,0,0,0]
解释：9999999999 + 1 = 10000000000
 

提示：

1 <= A.length <= 10000
0 <= A[i] <= 9
0 <= K <= 10000
如果 A.length > 1，那么 A[0] != 0
--------------------------------------------------------------------------
总体思路：
就是个按位加法。

细节：为了和习惯相同，少出错，把高位再前变成低位在前。
--------------------------------------------------------------------------
class Solution {
public:
    vector<int> addToArrayForm(vector<int>& A, int K) {
        vector<int> newA;
        vector<int> newK;
        vector<int> ans;
        int temp;
        for(int i = int(A.size()-1);i >= 0;i--){
            newA.push_back(A[i]);
        }
        while(K!=0){
            temp = K % 10;
            newK.push_back(temp);
            K /= 10;
        }
        if(newA.size() >= newK.size()){
            temp = 0;
            for(int i = 0;i < newK.size();i++){
                newA[i] = newA[i] + newK[i] + temp;
                temp = newA[i]>9 ? 1 : 0;
                newA[i] = newA[i] - temp * 10;
            }
            for(int i = int(newK.size());i < int(newA.size());i++){
                newA[i] = newA[i] + temp;
                temp = newA[i]>9 ? 1 : 0;
                newA[i] = newA[i] - temp * 10;
            }
            if(temp > 0){
                newA.push_back(1);
            }
            for(int i = newA.size() - 1;i >= 0;i--){
                ans.push_back(newA[i]);
            }
        }else{
            temp = 0;
            for(int i = 0;i < newA.size();i++){
                newK[i] = newA[i] + newK[i] + temp;
                temp = newK[i]>9 ? 1 : 0;
                newK[i] = newK[i] - temp * 10;
            }
            for(int i = int(newA.size());i < int(newK.size());i++){
                newK[i] = newK[i] + temp;
                temp = newK[i]>9 ? 1 : 0;
                newK[i] = newK[i] - temp * 10;
            }
            if(temp > 0){
                newK.push_back(1);
            }
            for(int i = newK.size() - 1;i >= 0;i--){
                ans.push_back(newK[i]);
            }
        }
        return ans;
    }
};
