n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。

【图】

上图为 8 皇后问题的一种解法。

给定一个整数 n，返回所有不同的 n 皇后问题的解决方案。

每一种解法包含一个明确的 n 皇后问题的棋子放置方案，该方案中 'Q' 和 '.' 分别代表了皇后和空位。

示例:

输入: 4
输出: [
 [".Q..",  // 解法 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // 解法 2
  "Q...",
  "...Q",
  ".Q.."]
]
解释: 4 皇后问题存在两个不同的解法。
--------------------------------------------------------------------------
总体思路：
回溯法（子集树框架）。
回溯算法的题目错了好几次的地方是不要忘记pop，另外本题那个注释掉的return如果存在会导致一行中的某个格子一旦不符合要求，整行后边都没法遍历了。

--------------------------------------------------------------------------
class Solution {
public:
    int totalNQueens(int n) {
        backTrack(0, n);
        return cnt;
    }
    int cnt = 0;
    vector<int> ans;
    void backTrack(int a, int n){
    	if(a == n){
    		cnt++;
    		for(int i = 0;i < n;i++){
    			cout<<ans[i];
    		}
    		cout<<endl;

    	}else{
    		for(int i = 0;i < n;i++){
    			ans.push_back(i);
    			if(placeTest(a)){
    				backTrack(a+1,n);
    				ans.pop_back();
    			}else{
    				ans.pop_back();
            //return；
    			}
    		}
    	}
    }
    bool placeTest(int k){
    	for(int i = 0;i < k;i++){
    		if(ans[i]==ans[k] || abs(ans[i] - ans[k]) == abs(i - k)){
    			return false;
    		}
    	}
    	return true;
    }
};
