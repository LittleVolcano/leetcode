编写一个算法来判断一个数是不是“快乐数”。

一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。

示例: 

输入: 19
输出: true
解释: 
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1
--------------------------------------------------------------------------
总体思路：
数学

不是快乐数的数称为不快乐数（unhappy number），所有不快乐数的数位平方和计算，最後都会进入 4 → 16 → 37 → 58 → 89 → 145 → 42 → 20 → 4 的循环中。
循环计算，遇到1活着以上序列中的某个数就可以得到结果了。

--------------------------------------------------------------------------
class Solution {
public:
    bool isHappy(int n) {
        vector<int> temp;
        int a = 0,b = 0,c = 0;
        while(true){
        	while(n){//拆分成位
	        	a = n % 10;
	        	n/=10;
	        	temp.push_back(a);
	        }

	        c = 0;
	        while(!temp.empty()){//计算平方和
	        	b = temp.back();
	        	temp.pop_back();
	        	c += b * b;
	        }
	        n = c;

	        if(n == 1){//判断
	        	break;
	        }else if(n == 4){
	        	return false;
	        }
        }
        return true;
	        
    }
};
