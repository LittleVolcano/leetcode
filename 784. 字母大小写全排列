给定一个字符串S，通过将字符串S中的每个字母转变大小写，我们可以获得一个新的字符串。返回所有可能得到的字符串集合。

示例:
输入: S = "a1b2"
输出: ["a1b2", "a1B2", "A1b2", "A1B2"]

输入: S = "3z4"
输出: ["3z4", "3Z4"]

输入: S = "12345"
输出: ["12345"]
注意：

S 的长度不超过12。
S 仅由数字和字母组成。
--------------------------------------------------------------------------
总体思路：
回溯（子集树）
需要注意的是每个可能push了以后递归调用之后需要都pop掉以供后边更深层使用不出错。

另外可以不用回溯，直接一个个遍历S时间效率更好。

--------------------------------------------------------------------------
class Solution {
public:
    vector<string> letterCasePermutation(string S) {
        backTrack(0, S.size(), S);
        return ans;
    }

    string temp;
    vector<string> ans;

    void backTrack(int a,int n, string S){//a是当前处理的序号，n是nums元素个数
    	if(a == n){
    		ans.push_back(temp);
    	}else{
    		if(isalpha(S[a])){//a位是字母
    			temp.push_back(tolower(S[a]));
    			backTrack(a+1, n, S);
    			temp.pop_back();

    			temp.push_back(toupper(S[a]));
    			backTrack(a+1, n, S);
    			temp.pop_back();
    		}else{//a位是数字
    			temp.push_back(S[a]);
    			backTrack(a+1, n, S);
    			temp.pop_back();
    		}
    		
    	}
    }
};
