字符串 S 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一个字母只会出现在其中的一个片段。返回一个表示每个字符串片段的长度的列表。

示例 1:

输入: S = "ababcbacadefegdehijhklij"
输出: [9,7,8]
解释:
划分结果为 "ababcbaca", "defegde", "hijhklij"。
每个字母最多出现在一个片段中。
像 "ababcbacadefegde", "hijhklij" 的划分是错误的，因为划分的片段数较少。
注意:

S的长度在[1, 500]之间。
S只包含小写字母'a'到'z'。

--------------------------------------------------------------------------
总体思路：
双指针（一快一慢）
每个字母第一次出现和最后一次出现的位置划出了一个区间，这个区间内的字母如果在区间外出现过，就会扩充这个区间的范围。
用一个hash数组存储每个字母最后出现的位置。
i指针指向第一个字母，j指针跳跃到i所指的字母最右的出现位置，i开始向j靠拢。靠拢过程中经过的字母都查看一下这个字母的最右出现位置，如果该位置比现在j的位置还远，就更新j。
为了将区间长度记录下来，需要一个pointer指向每个区间开始的位置之前一个位置，j-pointer即区间长度。

--------------------------------------------------------------------------
class Solution {
public:
    vector<int> partitionLabels(string S) {
    	vector<int> ans;

        int hashTable[26];
        memset(hashTable,-1,sizeof(hashTable));
        for(int i = 0;i < S.size();i++){      	
        	hashTable[S[i]-'a'] = i;
        }
        int i = 0,j = hashTable[S[i] - 'a'];
        int pointer = -1;
        while(1){
	        while(i<j){
	        	if(hashTable[S[i] - 'a'] > j){
	        		j = hashTable[S[i] - 'a'];
	        	}
	        	i++;
	        }
	        ans.push_back(j - pointer);//i走到了j，即区间到头
	        pointer = j;
	        i++;
	        if(i == S.size()){
	        	break;
	        }
	        j = hashTable[S[i] - 'a'];
        }
        return ans;
    }
};
