给定一个由表示变量之间关系的字符串方程组成的数组，每个字符串方程 equations[i] 的长度为 4，并采用两种不同的形式之一："a==b" 或 "a!=b"。在这里，a 和 b 是小写字母（不一定不同），表示单字母变量名。

只有当可以将整数分配给变量名，以便满足所有给定的方程时才返回 true，否则返回 false。 

 

示例 1：

输入：["a==b","b!=a"]
输出：false
解释：如果我们指定，a = 1 且 b = 1，那么可以满足第一个方程，但无法满足第二个方程。没有办法分配变量同时满足这两个方程。
示例 2：

输出：["b==a","a==b"]
输入：true
解释：我们可以指定 a = 1 且 b = 1 以满足满足这两个方程。
示例 3：

输入：["a==b","b==c","a==c"]
输出：true
示例 4：

输入：["a==b","b!=c","c==a"]
输出：false
示例 5：

输入：["c==c","b==d","x!=z"]
输出：true
 

提示：

1 <= equations.length <= 500
equations[i].length == 4
equations[i][0] 和 equations[i][3] 是小写字母
equations[i][1] 要么是 '='，要么是 '!'
equations[i][2] 是 '='
--------------------------------------------------------------------------
总体思路：
顺序处理不会处理，有的集合不允许合并，很不好处理哪个和哪个不能合并，想到可以分成两遍处理。
第一遍只处理等于的式子，等于的都合并。第二遍处理不等于的式子，如果不等于两边的字母都出现过，且都在统一个集合中，那就有矛盾了，return false。
两遍下来没有矛盾的话就是关系成立，return true。

细节：怎么表示是同一个集合呢？因为等号两遍限定在26个小写字母中，所以用一个长26的数组来存储字母所属集合号码即可。
--------------------------------------------------------------------------
class Solution {
public:
    bool equationsPossible(vector<string>& equations) {
        int hashTable[26];
        int setNum = 0;
        for(int i = 0;i < 26;i++){
            hashTable[i] = -1;
        }
        for(int i = 0;i < equations.size();i++){//先处理一遍相同的
            if(equations[i][1] == '=' && equations[i][0]!=equations[i][3]){
                char a = equations[i][0];
                char b = equations[i][3];
                if(hashTable[a - 'a'] < 0 && hashTable[b - 'a'] < 0){//都没出现过
                    hashTable[a - 'a'] = setNum;
                    hashTable[b - 'a'] = setNum++;
                }else if(hashTable[a - 'a'] >= 0 && hashTable[b - 'a'] >= 0){//都出现过，合并
                    int temp = hashTable[a - 'a'];
                    for(int j = 0;j < 26;j++){
                        if(hashTable[j] == temp){
                            hashTable[j] = hashTable[b - 'a'];
                        }
                    }
                }else{
                    if(hashTable[a - 'a'] < 0){//a没出现过
                        hashTable[a - 'a'] = hashTable[b - 'a'];
                    }else{
                        hashTable[b - 'a'] = hashTable[a - 'a'];
                    }
                }
            }
        }
        for(int i = 0;i < equations.size();i++){//再处理一遍不相同的
            if(equations[i][1] == '!'){
                if(equations[i][0]==equations[i][3]){
                    return false;
                }
                char a = equations[i][0];
                char b = equations[i][3];
                if(hashTable[a - 'a'] >= 0 && hashTable[b - 'a'] >= 0 && hashTable[a - 'a'] == hashTable[b - 'a']){
                    return false;
                }
                
            }
        }
        return true;
    }
};
