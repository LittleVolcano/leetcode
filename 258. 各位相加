给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。

示例:

输入: 38
输出: 2 
解释: 各位相加的过程为：3 + 8 = 11, 1 + 1 = 2。 由于 2 是一位数，所以返回 2。
进阶:
你可以不使用循环或者递归，且在 O(1) 时间复杂度内解决这个问题吗？
--------------------------------------------------------------------------
进阶的解法：
f(x*10+y)=f(x*9+x+y)=f(x+y), 成立当f(x)= x%9

就一行，return (num-1)%9+1; 提示是num每加一，结果在1~9的循环队列，证明wiki有
--------------------------------------------------------------------------
class Solution {
public:
    int addDigits(int num) {
        vector<int> temp;
        while(num>9){
        	while(num != 0){
	        	int a = num % 10;
	        	temp.push_back(a);
	        	num/=10;
	        }
	        while(!temp.empty()){
	        	int b = temp.back();
	        	temp.pop_back();
	        	num += b;
        	}
        }
        return num;
    }
};
