在大小为 2N 的数组 A 中有 N+1 个不同的元素，其中有一个元素重复了 N 次。
返回重复了 N 次的那个元素。

示例 1：

输入：[1,2,3,3]
输出：3
示例 2：

输入：[2,1,2,5,3,2]
输出：2
示例 3：

输入：[5,1,5,2,5,3,5,4]
输出：5
 
提示：
4 <= A.length <= 10000
0 <= A[i] < 10000
A.length 为偶数
--------------------------------------------------------------------------
总体思路：哈希表
优化方法：随机（空间复杂度大大降低，不用hash表了）

注意，总共就只有2N个元素，其中N+1个是不同的，那除了有个出现N次的以外，其他的都是只出现一次。
--------------------------------------------------------------------------
哈希表方法：
class Solution {
public:
    int repeatedNTimes(vector<int>& A) {
        bool hashTable[10010] = {false};
        for(int i = 0;i < A.size();i++){
            if(hashTable[A[i]] == false){
                hashTable[A[i]] = true;
            }else{
                return A[i];
            }
        }
        return -1;
    }
};

随机方法：
class Solution {
public:
    int repeatedNTimes(vector<int>& A) {
        int i = 0, j = 0, n = A.size();
        while (i == j || A[i] != A[j])
            i = rand() % n, j = rand() % n;
        return A[i];
    }
}
