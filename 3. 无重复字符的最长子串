给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。

示例 1:

输入: "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
示例 2:

输入: "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
示例 3:

输入: "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。

--------------------------------------------------------------------------
总体思路：
双指针（一快一慢都往右走）



子串是连续的，子序列可以是不连续的。
 
朴素算法：
生成子串：i指针遍历，j指针从i＋1开始遍历。时间O(n2)
验证重不重复：26个字母的hash
 
O（n）时间的算法：
思路：子串不可能跨越两个a
case：iuabcdame
说明：
快慢指针都先指向第一个字符。
快指针经过一个字符，就把这个字符标记为出现过。
慢指针指向第一个字符i，快指针指到第二个a时发现a出现过了，于是慢指针往后移动。
慢指针经过的字符全部标为未处理。慢指针直到走过第一个a后停止。
 
 
实现时候注意，可能有不是字母的字符。ascii中第一个能显示的字符是空格。
--------------------------------------------------------------------------
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int MaxS = 0;
        int temp = 0;
        bool hashTable[120] = {false};
        string::const_iterator it = s.begin();
        string::const_iterator it2 = s.begin();
        while(it2 != s.end()){
            if(hashTable[*it2 - ' '] == false){//无重复
                temp++;
                if(temp > MaxS){
                    MaxS = temp;
                }
            }else{//有重复
                while(*it != *it2){
                    temp--;
                    hashTable[*it - ' '] = false;
                    it++;
                }
                it++;
            }
            
            hashTable[*it2 - ' '] = true;
            it2++;
        }
        return MaxS;
    }
};
