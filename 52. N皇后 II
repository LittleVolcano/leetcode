n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。

[图片]

上图为 8 皇后问题的一种解法。

给定一个整数 n，返回所有不同的 n 皇后问题的解决方案。

每一种解法包含一个明确的 n 皇后问题的棋子放置方案，该方案中 'Q' 和 '.' 分别代表了皇后和空位。

示例:

输入: 4
输出: [
 [".Q..",  // 解法 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // 解法 2
  "Q...",
  "...Q",
  ".Q.."]
]
解释: 4 皇后问题存在两个不同的解法。

--------------------------------------------------------------------------
总体思路：
回溯法（子集树框架）。
比较简单，和52题N皇后 II主体相同，只是处理一下边界的时候把存下来的可行序列转换为vector<string>存下来即可。

--------------------------------------------------------------------------
class Solution {
public:
    vector<vector<string>> solveNQueens(int n) {
        backTrack(0, n);
        return ans2;
    }
    vector<vector<int>> ans;
    vector<int> temp;
    vector<string> str;
    vector<vector<string>> ans2;
    void backTrack(int a, int n){
        if(a == n){
            for(int i = 0;i < n;i++){
                str.push_back(toStr(temp[i],n));//
            }
            ans2.push_back(str);
            str.clear();

        }else{
            for(int i = 0;i < n;i++){
                temp.push_back(i);
                if(placeTest(a)){
                    backTrack(a+1,n);
                    temp.pop_back();
                }else{
                    temp.pop_back();
                }
            }
        }
    }
    bool placeTest(int k){
        for(int i = 0;i < k;i++){
            if(temp[i]==temp[k] || abs(temp[i] - temp[k]) == abs(i - k)){
                return false;
            }
        }
        return true;
    }
    string toStr(int k, int n){
        string s;
        for(int i = 0;i < n;i++){
            if(i == k){
                s.push_back('Q');
            }else{
                s.push_back('.');
            }
        }
        return s;
    }
};
