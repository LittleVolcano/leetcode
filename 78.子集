给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。

说明：解集不能包含重复的子集。

示例:

输入: nums = [1,2,3]
输出:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
--------------------------------------------------------------------------
总体思路：
回溯

具体实现的时候，用子集树框架（算法导论ppt回溯章）。
框架中backtrack函数的else部分是遍历第a层的每一种可能，对本题就是两种可能（加入这个数和不加入这个数）。
加入这个数之后，还需要再pop出来这个数，而不应该在a==n这个尽头直接清空temp，因为更深层的还需要用之前加入进来的序列。


--------------------------------------------------------------------------
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        backTrack(0,nums.size(),nums);
        return ans;
    }
    
    vector<int> temp;
    vector<vector<int>> ans;
    
    void backTrack(int a,int n, vector<int>& nums){//a是当前处理的序号，n是nums元素个数
    	if(a == n){
    		ans.push_back(temp);
    	}else{

    		backTrack(a+1,n,nums);//第a个不加入
    		
    		temp.push_back(nums[a]);//第a个加入
    		backTrack(a+1,n,nums);
                temp.pop_back(nums[a]);
    	}
    }
};
