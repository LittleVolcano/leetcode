给定一个按非递减顺序排序的整数数组 A，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。

 

示例 1：

输入：[-4,-1,0,3,10]
输出：[0,1,9,16,100]
示例 2：

输入：[-7,-3,2,3,11]
输出：[4,9,9,49,121]
 

提示：

1 <= A.length <= 10000
-10000 <= A[i] <= 10000
A 已按非递减顺序排序。



--------------------------------------------------------------------------
基本思路：取绝对值排序后进行平方和，或者直接平方和后排序
优化思路：双指针，找到绝对值最小的数值向两边走，每次选择绝对值较小的。两个地方容易出错，1是找绝对值最小那个值，2是向两边走的选择（边界）
--------------------------------------------------------------------------
基本：
class Solution {
public:
    vector<int> sortedSquares(vector<int>& A) {
        for(int i = 0;i<A.size();i++){
            A[i] = A[i]*A[i];
        }
        sort(A.begin(), A.end());
        return A;
    }
};

优化：
class Solution {
public:
    vector<int> sortedSquares(vector<int>& A) {
    	if(A.size() == 1){
    		A[0] = A[0] * A[0];
    		return A;
    	}
    	int minIndex = A.size() - 1;
    	for(int i = 1;i<A.size();i++){
            if( abs(A[i-1])<abs(A[i])){
            	minIndex = i-1;
            	break;
            }
        }
        int i = minIndex,j = minIndex+1;
        vector<int> ans;
        while(i >= 0 || j < A.size()){
        	if(i >= 0 && j == A.size()){
        		ans.push_back(A[i]*A[i]);
        		i--;
        	}else if( i==-1 && j < A.size()){
        		ans.push_back(A[j]*A[j]);
        		j++;
        	}else if( abs(A[i]) < abs(A[j]) ){
        		ans.push_back(A[i]*A[i]);
        		i--;
        	}else{
        		ans.push_back(A[j]*A[j]);
        		j++;
        	}
        }
        return ans;
    }
};
